#!/usr/bin/env perl

use 5.010;
use strict;
use warnings FATAL => 'all';
use autodie;
use English qw( -no_match_vars );
use IPC::Cmd;

my $latest;
LINE: {
    open my $lib_version, q{<}, 'LIB_VERSION';
    my $line = <$lib_version>;
    $latest = $line;
    chomp $latest;
} ## end LINE:

die "Could not find latest change" if not defined $latest;
warn "Bumping -> $latest\n";

my ( $libmarpa_major, $libmarpa_minor, $libmarpa_micro )
    = split m/[.]/, $latest, 3;

if ( not defined $libmarpa_micro ) {
    die "bump_version Cannot handle new version number: $latest";
}

for my $configure_ac_file (
    qw(
    work/ac/configure.ac
    work/ac_doc/configure.ac
    )
    )
{
    say STDERR $configure_ac_file;
    my $file = do { local ( @ARGV, $/ ) = ($configure_ac_file); <> };
    $file =~ s{
    ( m4_define [(] [\[] marpa_major_version [\]] [,] \s* [\[] )  \d+ ( [\]] )
  }{$1${libmarpa_major}$2}xms;
    $file =~ s{
    ( m4_define [(] [\[] marpa_minor_version [\]] [,] \s* [\[] )  \d+ ( [\]] )
  }{$1${libmarpa_minor}$2}xms;
    $file =~ s{
    ( m4_define [(] [\[] marpa_micro_version [\]] [,] \s* [\[] )  \d+ ( [\]] )
  }{$1${libmarpa_micro}$2}xms;
    open my $out, '>', $configure_ac_file;
    print $out $file;
} ## end for my $configure_ac_file ( qw( cpan/libmarpa/ac/configure.ac...))

{
    open my $out, '>', 'work/public/marpa.h-version';
    say $out join " ", q{#define MARPA_MAJOR_VERSION}, $libmarpa_major;
    say $out join " ", q{#define MARPA_MINOR_VERSION}, $libmarpa_minor;
    say $out join " ", q{#define MARPA_MICRO_VERSION}, $libmarpa_micro;
    close $out;
}

